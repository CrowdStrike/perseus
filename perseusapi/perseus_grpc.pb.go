// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: perseus.proto

package perseusapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PerseusService_CreateModule_FullMethodName       = "/crowdstrike.perseus.perseusapi.PerseusService/CreateModule"
	PerseusService_ListModules_FullMethodName        = "/crowdstrike.perseus.perseusapi.PerseusService/ListModules"
	PerseusService_ListModuleVersions_FullMethodName = "/crowdstrike.perseus.perseusapi.PerseusService/ListModuleVersions"
	PerseusService_UpdateDependencies_FullMethodName = "/crowdstrike.perseus.perseusapi.PerseusService/UpdateDependencies"
	PerseusService_QueryDependencies_FullMethodName  = "/crowdstrike.perseus.perseusapi.PerseusService/QueryDependencies"
)

// PerseusServiceClient is the client API for PerseusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PerseusServiceClient interface {
	// Adds a module, along with any versions provided, to the system
	CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleResponse, error)
	// Lists known modules.
	//
	// If specified, 'filter' should contain a pattern (type TBD) to match against the modules' names.
	// The returned elements will contain no versions, only the highest version, or all versions,
	// based on the value of the 'version_option' field.
	ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesResponse, error)
	// Lists versions of the specified module, either the latest or all
	ListModuleVersions(ctx context.Context, in *ListModuleVersionsRequest, opts ...grpc.CallOption) (*ListModuleVersionsResponse, error)
	// Adds or updates the direct dependencies of specific version of a module.
	//
	// When invoking this API, the 'versions' attribute of each specified dependency must contain exactly 1 item
	UpdateDependencies(ctx context.Context, in *UpdateDependenciesRequest, opts ...grpc.CallOption) (*UpdateDependenciesResponse, error)
	// Queries direct dependencies of a specific version of a module.
	//
	// The 'direction' indicate whether or not the returned list contains dependencies (things the
	// specified module depends on) or dependents (things that depend on the specified module).
	QueryDependencies(ctx context.Context, in *QueryDependenciesRequest, opts ...grpc.CallOption) (*QueryDependenciesResponse, error)
}

type perseusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPerseusServiceClient(cc grpc.ClientConnInterface) PerseusServiceClient {
	return &perseusServiceClient{cc}
}

func (c *perseusServiceClient) CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleResponse, error) {
	out := new(CreateModuleResponse)
	err := c.cc.Invoke(ctx, PerseusService_CreateModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perseusServiceClient) ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesResponse, error) {
	out := new(ListModulesResponse)
	err := c.cc.Invoke(ctx, PerseusService_ListModules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perseusServiceClient) ListModuleVersions(ctx context.Context, in *ListModuleVersionsRequest, opts ...grpc.CallOption) (*ListModuleVersionsResponse, error) {
	out := new(ListModuleVersionsResponse)
	err := c.cc.Invoke(ctx, PerseusService_ListModuleVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perseusServiceClient) UpdateDependencies(ctx context.Context, in *UpdateDependenciesRequest, opts ...grpc.CallOption) (*UpdateDependenciesResponse, error) {
	out := new(UpdateDependenciesResponse)
	err := c.cc.Invoke(ctx, PerseusService_UpdateDependencies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perseusServiceClient) QueryDependencies(ctx context.Context, in *QueryDependenciesRequest, opts ...grpc.CallOption) (*QueryDependenciesResponse, error) {
	out := new(QueryDependenciesResponse)
	err := c.cc.Invoke(ctx, PerseusService_QueryDependencies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PerseusServiceServer is the server API for PerseusService service.
// All implementations must embed UnimplementedPerseusServiceServer
// for forward compatibility
type PerseusServiceServer interface {
	// Adds a module, along with any versions provided, to the system
	CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleResponse, error)
	// Lists known modules.
	//
	// If specified, 'filter' should contain a pattern (type TBD) to match against the modules' names.
	// The returned elements will contain no versions, only the highest version, or all versions,
	// based on the value of the 'version_option' field.
	ListModules(context.Context, *ListModulesRequest) (*ListModulesResponse, error)
	// Lists versions of the specified module, either the latest or all
	ListModuleVersions(context.Context, *ListModuleVersionsRequest) (*ListModuleVersionsResponse, error)
	// Adds or updates the direct dependencies of specific version of a module.
	//
	// When invoking this API, the 'versions' attribute of each specified dependency must contain exactly 1 item
	UpdateDependencies(context.Context, *UpdateDependenciesRequest) (*UpdateDependenciesResponse, error)
	// Queries direct dependencies of a specific version of a module.
	//
	// The 'direction' indicate whether or not the returned list contains dependencies (things the
	// specified module depends on) or dependents (things that depend on the specified module).
	QueryDependencies(context.Context, *QueryDependenciesRequest) (*QueryDependenciesResponse, error)
	mustEmbedUnimplementedPerseusServiceServer()
}

// UnimplementedPerseusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPerseusServiceServer struct {
}

func (UnimplementedPerseusServiceServer) CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModule not implemented")
}
func (UnimplementedPerseusServiceServer) ListModules(context.Context, *ListModulesRequest) (*ListModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModules not implemented")
}
func (UnimplementedPerseusServiceServer) ListModuleVersions(context.Context, *ListModuleVersionsRequest) (*ListModuleVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModuleVersions not implemented")
}
func (UnimplementedPerseusServiceServer) UpdateDependencies(context.Context, *UpdateDependenciesRequest) (*UpdateDependenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDependencies not implemented")
}
func (UnimplementedPerseusServiceServer) QueryDependencies(context.Context, *QueryDependenciesRequest) (*QueryDependenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDependencies not implemented")
}
func (UnimplementedPerseusServiceServer) mustEmbedUnimplementedPerseusServiceServer() {}

// UnsafePerseusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PerseusServiceServer will
// result in compilation errors.
type UnsafePerseusServiceServer interface {
	mustEmbedUnimplementedPerseusServiceServer()
}

func RegisterPerseusServiceServer(s grpc.ServiceRegistrar, srv PerseusServiceServer) {
	s.RegisterService(&PerseusService_ServiceDesc, srv)
}

func _PerseusService_CreateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerseusServiceServer).CreateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerseusService_CreateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerseusServiceServer).CreateModule(ctx, req.(*CreateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerseusService_ListModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerseusServiceServer).ListModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerseusService_ListModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerseusServiceServer).ListModules(ctx, req.(*ListModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerseusService_ListModuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModuleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerseusServiceServer).ListModuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerseusService_ListModuleVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerseusServiceServer).ListModuleVersions(ctx, req.(*ListModuleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerseusService_UpdateDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDependenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerseusServiceServer).UpdateDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerseusService_UpdateDependencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerseusServiceServer).UpdateDependencies(ctx, req.(*UpdateDependenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerseusService_QueryDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDependenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerseusServiceServer).QueryDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerseusService_QueryDependencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerseusServiceServer).QueryDependencies(ctx, req.(*QueryDependenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PerseusService_ServiceDesc is the grpc.ServiceDesc for PerseusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PerseusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crowdstrike.perseus.perseusapi.PerseusService",
	HandlerType: (*PerseusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateModule",
			Handler:    _PerseusService_CreateModule_Handler,
		},
		{
			MethodName: "ListModules",
			Handler:    _PerseusService_ListModules_Handler,
		},
		{
			MethodName: "ListModuleVersions",
			Handler:    _PerseusService_ListModuleVersions_Handler,
		},
		{
			MethodName: "UpdateDependencies",
			Handler:    _PerseusService_UpdateDependencies_Handler,
		},
		{
			MethodName: "QueryDependencies",
			Handler:    _PerseusService_QueryDependencies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "perseus.proto",
}

const ()

// HealthZServiceClient is the client API for HealthZService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthZServiceClient interface {
}

type healthZServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthZServiceClient(cc grpc.ClientConnInterface) HealthZServiceClient {
	return &healthZServiceClient{cc}
}

// HealthZServiceServer is the server API for HealthZService service.
// All implementations must embed UnimplementedHealthZServiceServer
// for forward compatibility
type HealthZServiceServer interface {
	mustEmbedUnimplementedHealthZServiceServer()
}

// UnimplementedHealthZServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHealthZServiceServer struct {
}

func (UnimplementedHealthZServiceServer) mustEmbedUnimplementedHealthZServiceServer() {}

// UnsafeHealthZServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthZServiceServer will
// result in compilation errors.
type UnsafeHealthZServiceServer interface {
	mustEmbedUnimplementedHealthZServiceServer()
}

func RegisterHealthZServiceServer(s grpc.ServiceRegistrar, srv HealthZServiceServer) {
	s.RegisterService(&HealthZService_ServiceDesc, srv)
}

// HealthZService_ServiceDesc is the grpc.ServiceDesc for HealthZService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthZService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crowdstrike.perseus.perseusapi.HealthZService",
	HandlerType: (*HealthZServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "perseus.proto",
}
