// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: perseus.proto

package perseusapiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	perseusapi "github.com/CrowdStrike/perseus/perseusapi"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PerseusServiceName is the fully-qualified name of the PerseusService service.
	PerseusServiceName = "crowdstrike.perseus.perseusapi.PerseusService"
	// HealthZServiceName is the fully-qualified name of the HealthZService service.
	HealthZServiceName = "crowdstrike.perseus.perseusapi.HealthZService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PerseusServiceCreateModuleProcedure is the fully-qualified name of the PerseusService's
	// CreateModule RPC.
	PerseusServiceCreateModuleProcedure = "/crowdstrike.perseus.perseusapi.PerseusService/CreateModule"
	// PerseusServiceListModulesProcedure is the fully-qualified name of the PerseusService's
	// ListModules RPC.
	PerseusServiceListModulesProcedure = "/crowdstrike.perseus.perseusapi.PerseusService/ListModules"
	// PerseusServiceListModuleVersionsProcedure is the fully-qualified name of the PerseusService's
	// ListModuleVersions RPC.
	PerseusServiceListModuleVersionsProcedure = "/crowdstrike.perseus.perseusapi.PerseusService/ListModuleVersions"
	// PerseusServiceUpdateDependenciesProcedure is the fully-qualified name of the PerseusService's
	// UpdateDependencies RPC.
	PerseusServiceUpdateDependenciesProcedure = "/crowdstrike.perseus.perseusapi.PerseusService/UpdateDependencies"
	// PerseusServiceQueryDependenciesProcedure is the fully-qualified name of the PerseusService's
	// QueryDependencies RPC.
	PerseusServiceQueryDependenciesProcedure = "/crowdstrike.perseus.perseusapi.PerseusService/QueryDependencies"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	perseusServiceServiceDescriptor                  = perseusapi.File_perseus_proto.Services().ByName("PerseusService")
	perseusServiceCreateModuleMethodDescriptor       = perseusServiceServiceDescriptor.Methods().ByName("CreateModule")
	perseusServiceListModulesMethodDescriptor        = perseusServiceServiceDescriptor.Methods().ByName("ListModules")
	perseusServiceListModuleVersionsMethodDescriptor = perseusServiceServiceDescriptor.Methods().ByName("ListModuleVersions")
	perseusServiceUpdateDependenciesMethodDescriptor = perseusServiceServiceDescriptor.Methods().ByName("UpdateDependencies")
	perseusServiceQueryDependenciesMethodDescriptor  = perseusServiceServiceDescriptor.Methods().ByName("QueryDependencies")
	healthZServiceServiceDescriptor                  = perseusapi.File_perseus_proto.Services().ByName("HealthZService")
)

// PerseusServiceClient is a client for the crowdstrike.perseus.perseusapi.PerseusService service.
type PerseusServiceClient interface {
	// Adds a module, along with any versions provided, to the system
	CreateModule(context.Context, *connect.Request[perseusapi.CreateModuleRequest]) (*connect.Response[perseusapi.CreateModuleResponse], error)
	// Lists known modules.
	//
	// If specified, 'filter' should contain a pattern (type TBD) to match against the modules' names.
	// The returned elements will contain no versions, only the highest version, or all versions,
	// based on the value of the 'version_option' field.
	ListModules(context.Context, *connect.Request[perseusapi.ListModulesRequest]) (*connect.Response[perseusapi.ListModulesResponse], error)
	// Lists versions of the specified module, either the latest or all
	ListModuleVersions(context.Context, *connect.Request[perseusapi.ListModuleVersionsRequest]) (*connect.Response[perseusapi.ListModuleVersionsResponse], error)
	// Adds or updates the direct dependencies of specific version of a module.
	//
	// When invoking this API, the 'versions' attribute of each specified dependency must contain exactly 1 item
	UpdateDependencies(context.Context, *connect.Request[perseusapi.UpdateDependenciesRequest]) (*connect.Response[perseusapi.UpdateDependenciesResponse], error)
	// Queries direct dependencies of a specific version of a module.
	//
	// The 'direction' indicate whether or not the returned list contains dependencies (things the
	// specified module depends on) or dependents (things that depend on the specified module).
	QueryDependencies(context.Context, *connect.Request[perseusapi.QueryDependenciesRequest]) (*connect.Response[perseusapi.QueryDependenciesResponse], error)
}

// NewPerseusServiceClient constructs a client for the crowdstrike.perseus.perseusapi.PerseusService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPerseusServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PerseusServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &perseusServiceClient{
		createModule: connect.NewClient[perseusapi.CreateModuleRequest, perseusapi.CreateModuleResponse](
			httpClient,
			baseURL+PerseusServiceCreateModuleProcedure,
			connect.WithSchema(perseusServiceCreateModuleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listModules: connect.NewClient[perseusapi.ListModulesRequest, perseusapi.ListModulesResponse](
			httpClient,
			baseURL+PerseusServiceListModulesProcedure,
			connect.WithSchema(perseusServiceListModulesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listModuleVersions: connect.NewClient[perseusapi.ListModuleVersionsRequest, perseusapi.ListModuleVersionsResponse](
			httpClient,
			baseURL+PerseusServiceListModuleVersionsProcedure,
			connect.WithSchema(perseusServiceListModuleVersionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateDependencies: connect.NewClient[perseusapi.UpdateDependenciesRequest, perseusapi.UpdateDependenciesResponse](
			httpClient,
			baseURL+PerseusServiceUpdateDependenciesProcedure,
			connect.WithSchema(perseusServiceUpdateDependenciesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		queryDependencies: connect.NewClient[perseusapi.QueryDependenciesRequest, perseusapi.QueryDependenciesResponse](
			httpClient,
			baseURL+PerseusServiceQueryDependenciesProcedure,
			connect.WithSchema(perseusServiceQueryDependenciesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// perseusServiceClient implements PerseusServiceClient.
type perseusServiceClient struct {
	createModule       *connect.Client[perseusapi.CreateModuleRequest, perseusapi.CreateModuleResponse]
	listModules        *connect.Client[perseusapi.ListModulesRequest, perseusapi.ListModulesResponse]
	listModuleVersions *connect.Client[perseusapi.ListModuleVersionsRequest, perseusapi.ListModuleVersionsResponse]
	updateDependencies *connect.Client[perseusapi.UpdateDependenciesRequest, perseusapi.UpdateDependenciesResponse]
	queryDependencies  *connect.Client[perseusapi.QueryDependenciesRequest, perseusapi.QueryDependenciesResponse]
}

// CreateModule calls crowdstrike.perseus.perseusapi.PerseusService.CreateModule.
func (c *perseusServiceClient) CreateModule(ctx context.Context, req *connect.Request[perseusapi.CreateModuleRequest]) (*connect.Response[perseusapi.CreateModuleResponse], error) {
	return c.createModule.CallUnary(ctx, req)
}

// ListModules calls crowdstrike.perseus.perseusapi.PerseusService.ListModules.
func (c *perseusServiceClient) ListModules(ctx context.Context, req *connect.Request[perseusapi.ListModulesRequest]) (*connect.Response[perseusapi.ListModulesResponse], error) {
	return c.listModules.CallUnary(ctx, req)
}

// ListModuleVersions calls crowdstrike.perseus.perseusapi.PerseusService.ListModuleVersions.
func (c *perseusServiceClient) ListModuleVersions(ctx context.Context, req *connect.Request[perseusapi.ListModuleVersionsRequest]) (*connect.Response[perseusapi.ListModuleVersionsResponse], error) {
	return c.listModuleVersions.CallUnary(ctx, req)
}

// UpdateDependencies calls crowdstrike.perseus.perseusapi.PerseusService.UpdateDependencies.
func (c *perseusServiceClient) UpdateDependencies(ctx context.Context, req *connect.Request[perseusapi.UpdateDependenciesRequest]) (*connect.Response[perseusapi.UpdateDependenciesResponse], error) {
	return c.updateDependencies.CallUnary(ctx, req)
}

// QueryDependencies calls crowdstrike.perseus.perseusapi.PerseusService.QueryDependencies.
func (c *perseusServiceClient) QueryDependencies(ctx context.Context, req *connect.Request[perseusapi.QueryDependenciesRequest]) (*connect.Response[perseusapi.QueryDependenciesResponse], error) {
	return c.queryDependencies.CallUnary(ctx, req)
}

// PerseusServiceHandler is an implementation of the crowdstrike.perseus.perseusapi.PerseusService
// service.
type PerseusServiceHandler interface {
	// Adds a module, along with any versions provided, to the system
	CreateModule(context.Context, *connect.Request[perseusapi.CreateModuleRequest]) (*connect.Response[perseusapi.CreateModuleResponse], error)
	// Lists known modules.
	//
	// If specified, 'filter' should contain a pattern (type TBD) to match against the modules' names.
	// The returned elements will contain no versions, only the highest version, or all versions,
	// based on the value of the 'version_option' field.
	ListModules(context.Context, *connect.Request[perseusapi.ListModulesRequest]) (*connect.Response[perseusapi.ListModulesResponse], error)
	// Lists versions of the specified module, either the latest or all
	ListModuleVersions(context.Context, *connect.Request[perseusapi.ListModuleVersionsRequest]) (*connect.Response[perseusapi.ListModuleVersionsResponse], error)
	// Adds or updates the direct dependencies of specific version of a module.
	//
	// When invoking this API, the 'versions' attribute of each specified dependency must contain exactly 1 item
	UpdateDependencies(context.Context, *connect.Request[perseusapi.UpdateDependenciesRequest]) (*connect.Response[perseusapi.UpdateDependenciesResponse], error)
	// Queries direct dependencies of a specific version of a module.
	//
	// The 'direction' indicate whether or not the returned list contains dependencies (things the
	// specified module depends on) or dependents (things that depend on the specified module).
	QueryDependencies(context.Context, *connect.Request[perseusapi.QueryDependenciesRequest]) (*connect.Response[perseusapi.QueryDependenciesResponse], error)
}

// NewPerseusServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPerseusServiceHandler(svc PerseusServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	perseusServiceCreateModuleHandler := connect.NewUnaryHandler(
		PerseusServiceCreateModuleProcedure,
		svc.CreateModule,
		connect.WithSchema(perseusServiceCreateModuleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	perseusServiceListModulesHandler := connect.NewUnaryHandler(
		PerseusServiceListModulesProcedure,
		svc.ListModules,
		connect.WithSchema(perseusServiceListModulesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	perseusServiceListModuleVersionsHandler := connect.NewUnaryHandler(
		PerseusServiceListModuleVersionsProcedure,
		svc.ListModuleVersions,
		connect.WithSchema(perseusServiceListModuleVersionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	perseusServiceUpdateDependenciesHandler := connect.NewUnaryHandler(
		PerseusServiceUpdateDependenciesProcedure,
		svc.UpdateDependencies,
		connect.WithSchema(perseusServiceUpdateDependenciesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	perseusServiceQueryDependenciesHandler := connect.NewUnaryHandler(
		PerseusServiceQueryDependenciesProcedure,
		svc.QueryDependencies,
		connect.WithSchema(perseusServiceQueryDependenciesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/crowdstrike.perseus.perseusapi.PerseusService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PerseusServiceCreateModuleProcedure:
			perseusServiceCreateModuleHandler.ServeHTTP(w, r)
		case PerseusServiceListModulesProcedure:
			perseusServiceListModulesHandler.ServeHTTP(w, r)
		case PerseusServiceListModuleVersionsProcedure:
			perseusServiceListModuleVersionsHandler.ServeHTTP(w, r)
		case PerseusServiceUpdateDependenciesProcedure:
			perseusServiceUpdateDependenciesHandler.ServeHTTP(w, r)
		case PerseusServiceQueryDependenciesProcedure:
			perseusServiceQueryDependenciesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPerseusServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPerseusServiceHandler struct{}

func (UnimplementedPerseusServiceHandler) CreateModule(context.Context, *connect.Request[perseusapi.CreateModuleRequest]) (*connect.Response[perseusapi.CreateModuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("crowdstrike.perseus.perseusapi.PerseusService.CreateModule is not implemented"))
}

func (UnimplementedPerseusServiceHandler) ListModules(context.Context, *connect.Request[perseusapi.ListModulesRequest]) (*connect.Response[perseusapi.ListModulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("crowdstrike.perseus.perseusapi.PerseusService.ListModules is not implemented"))
}

func (UnimplementedPerseusServiceHandler) ListModuleVersions(context.Context, *connect.Request[perseusapi.ListModuleVersionsRequest]) (*connect.Response[perseusapi.ListModuleVersionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("crowdstrike.perseus.perseusapi.PerseusService.ListModuleVersions is not implemented"))
}

func (UnimplementedPerseusServiceHandler) UpdateDependencies(context.Context, *connect.Request[perseusapi.UpdateDependenciesRequest]) (*connect.Response[perseusapi.UpdateDependenciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("crowdstrike.perseus.perseusapi.PerseusService.UpdateDependencies is not implemented"))
}

func (UnimplementedPerseusServiceHandler) QueryDependencies(context.Context, *connect.Request[perseusapi.QueryDependenciesRequest]) (*connect.Response[perseusapi.QueryDependenciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("crowdstrike.perseus.perseusapi.PerseusService.QueryDependencies is not implemented"))
}

// HealthZServiceClient is a client for the crowdstrike.perseus.perseusapi.HealthZService service.
type HealthZServiceClient interface {
}

// NewHealthZServiceClient constructs a client for the crowdstrike.perseus.perseusapi.HealthZService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHealthZServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HealthZServiceClient {
	return &healthZServiceClient{}
}

// healthZServiceClient implements HealthZServiceClient.
type healthZServiceClient struct {
}

// HealthZServiceHandler is an implementation of the crowdstrike.perseus.perseusapi.HealthZService
// service.
type HealthZServiceHandler interface {
}

// NewHealthZServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHealthZServiceHandler(svc HealthZServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/crowdstrike.perseus.perseusapi.HealthZService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHealthZServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHealthZServiceHandler struct{}
